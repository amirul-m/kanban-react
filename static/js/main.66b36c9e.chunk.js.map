{"version":3,"sources":["api/index.js","actions/index.js","components/Task.js","components/TaskList.js","components/TasksPage.js","App.js","serviceWorker.js","index.js","reducers/index.js"],"names":["API_BASE_URL","client","axios","create","baseURL","headers","Content-Type","createTask","_ref","title","description","_ref$status","status","dispatch","params","post","then","resp","type","payload","task","data","editStatusTask","id","arguments","length","undefined","getState","tasks","find","getTaskById","updatedTask","Object","assign","put","concat","api","fetchTasks","get","TASK_STATUSES","Task","props","react_default","a","createElement","className","value","onChange","e","onStatusChange","target","map","key","TaskList","components_Task","TasksPage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTitleChange","setState","onDescriptionChange","onCreateTask","preventDefault","state","resetForm","toggleForm","showNewCardForm","_this2","statusTasks","filter","components_TaskList","onClick","onSubmit","placeholder","renderTaskLists","Component","App","components_TasksPage","connect","Boolean","window","location","hostname","match","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66b36c9e.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_BASE_URL = 'http://localhost:3003'\n\nconst client = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport function fetchTasks(){\n  return client.get('/tasks')\n}\n\nexport function createTask(params){\n  return client.post('/tasks', params)\n}\n\nexport function editStatusTask(id, params){\n  return axios.put(`${API_BASE_URL}/tasks/${id}`, params)\n}","import * as api from '../api'\n\nexport function createTaskSucceeded(task){\n  return {\n    type: 'CREATE_TASK_SUCCEEDED',\n    payload: {\n      task\n    }\n  }\n}\n\nexport function createTask({title, description, status='Backlog'}){\n  return dispatch => {\n    api.createTask({title, description, status}).then(resp => {\n      dispatch(createTaskSucceeded(resp.data))\n    })\n  }\n}\n\nexport function editStatusTaskSucceeded(task){\n  return {\n    type: 'EDIT_STATUS_TASK_SUCCEEDED',\n    payload: {\n      task\n    }\n  }\n}\n\nexport function editStatusTask(id, params={}){\n  return (dispatch, getState) => {\n    const task = getTaskById(getState().tasks, id)\n    const updatedTask = Object.assign({}, task, params)\n\n    api.editStatusTask(id, updatedTask).then(resp => {\n      dispatch(editStatusTaskSucceeded(resp.data))\n    })\n  }\n}\n\nexport function getTaskById(tasks, id){\n  return tasks.find(task => task.id === id)\n}\n\nexport function fetchTasksSucceeded(tasks){\n  return{\n    type: 'FETCH_TASKS_SUCCEEDED',\n    payload: {\n      tasks\n    }\n  }\n}\n\nexport function fetchTasks(){\n  return dispatch => {\n    api.fetchTasks().then(resp => {\n      dispatch(fetchTasksSucceeded(resp.data))\n    })\n  }\n}","import React from 'react';\n// import TASK_STATUSES from './TasksPage'\n\nconst TASK_STATUSES = ['Backlog', 'To Do', 'In Progress', 'Done']\n\nconst Task = (props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"task-header\">\n        <div>{props.task.title}</div>\n        <select value={props.task.status} onChange={onStatusChange}>\n          {TASK_STATUSES.map(status => (\n            <option key={status} value={status}>\n              {status}\n            </option>\n          ))}\n        </select>\n      </div>\n      <hr/>\n      <div className=\"task-body\">\n        {props.task.description}\n      </div>\n    </div>\n  );\n\n  function onStatusChange(e){\n    props.onStatusChange(props.task.id, e.target.value)\n  }\n};\n\nexport default Task;","import React from 'react';\nimport Task from './Task'\n\nconst TaskList = (props) => {\n  return (\n    <div className=\"task-list\">\n      <div className=\"task-list-title\">\n        <strong>{props.status}</strong>\n      </div>\n      {props.tasks.map(task => (\n        <Task\n          key={task.id}\n          task={task}\n          onStatusChange={props.onStatusChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TaskList;","import React, { Component } from 'react';\nimport TaskList from './TaskList'\n\nconst TASK_STATUSES = ['Backlog', 'To Do', 'In Progress', 'Done']\n\nclass TasksPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showNewCardForm: false,\n      title: '',\n      description: ''\n    }\n  }\n\n  onTitleChange = (e) => {\n    this.setState({title: e.target.value});\n  }\n\n  onDescriptionChange = (e) => {\n    this.setState({description: e.target.value});\n  }\n\n  resetForm(){\n    this.setState({\n      showNewCardForm: false,\n      title: '',\n      description: ''\n    });\n  }\n\n  onCreateTask = (e) => {\n    e.preventDefault()\n    this.props.onCreateTask({\n      title: this.state.title,\n      description: this.state.description\n    })\n    this.resetForm()\n  }\n\n  toggleForm = () => {\n    this.setState({showNewCardForm: !this.state.showNewCardForm});\n  }\n  \n  renderTaskLists(){\n    const {tasks} = this.props\n    return TASK_STATUSES.map(status => {\n      const statusTasks = tasks.filter(task => task.status === status)\n      return (\n        <TaskList\n          key={status}\n          status={status}\n          tasks={statusTasks}\n          onStatusChange={this.props.onStatusChange}\n        />\n      )\n    })\n  }\n  render() {\n    return (\n      <div className=\"tasks\">\n        <div className=\"task-list-header\">\n          <button className=\"button button-default\" onClick={this.toggleForm}>\n            + New Task\n          </button>\n        </div>\n        {this.state.showNewCardForm && (\n          <form className=\"task-list-form\" onSubmit={this.onCreateTask}>\n            <input\n              className=\"full-width-input\"\n              onChange={this.onTitleChange}\n              value={this.state.title}\n              type=\"text\"\n              placeholder=\"title\"\n            />\n            <input\n              className=\"full-width-input\"\n              onChange={this.onDescriptionChange}\n              value={this.state.description}\n              type=\"text\"\n              placeholder=\"description\"\n            />\n            <button className=\"button\" type=\"submit\">\n              Save\n            </button>\n          </form>\n        )}\n\n        <div className=\"task-lists\">\n          {this.renderTaskLists()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TasksPage;","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport {createTask, editStatusTask, fetchTasks} from './actions'\nimport TaskPage from './components/TasksPage'\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch(fetchTasks())\n  }\n  \n\n  onCreateTask = ({title, description}) => {\n    this.props.dispatch(createTask({title, description}))\n  }\n\n  onStatusChange = (id, status) => {\n    this.props.dispatch(editStatusTask(id, {status}))\n  }\n\n  render() {\n    return (\n      <div className=\"main-content\">\n        <TaskPage\n          tasks={this.props.tasks}\n          onCreateTask={this.onCreateTask}\n          onStatusChange={this.onStatusChange}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    tasks: state.tasks\n  }\n}\n\nexport default connect(mapStateToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport tasks from './reducers'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  tasks,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default function tasks(state = {tasks: []}, action) {\n  switch (action.type) {\n    case 'CREATE_TASK': {\n      return {\n        tasks: state.tasks.concat(action.payload)\n      }\n    }\n\n    case 'EDIT_STATUS_TASK_SUCCEEDED': {\n      const {payload} = action\n      return {\n        tasks: state.tasks.map(task => {\n          if (task.id === payload.task.id){\n            return payload.task\n          }\n          return task\n        })\n      }\n    }\n    \n    case 'EDIT_STATUS_TASK': {\n      const {payload} = action\n      return {\n        tasks: state.tasks.map(task => {\n          if (task.id === payload.id){\n            return Object.assign({}, task, payload.params)\n          }\n          return task\n        })\n      }\n    }\n    \n    case 'FETCH_TASKS_SUCCEEDED': {\n      return {\n        tasks: action.payload.tasks\n      }\n    }\n\n    case 'CREATE_TASK_SUCCEEDED': {\n      return {\n        tasks: state.tasks.concat(action.payload.task)\n      }\n    }\n  \n    default:\n      return state\n  }\n}"],"sourceRoot":""}